-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
      exp = memo $ eta expr({
          [Left, {[s("!!"), fun (l, op, r) {Binop (op, l, r)}]}],
          [Left, {[s("&&"), fun (l, op, r) {Binop (op, l, r)}]}],
          [Nona, {[s("=="), fun (l, op, r) {Binop (op, l, r)}],
                  [s("!="), fun (l, op, r) {Binop (op, l, r)}],
                  [s("<="), fun (l, op, r) {Binop (op, l, r)}],
                  [s("<"), fun (l, op, r) {Binop (op, l, r)}],
                  [s(">="), fun (l, op, r) {Binop (op, l, r)}],
                  [s(">"), fun (l, op, r) {Binop (op, l, r)}]
                 }
          ],
          [Left, {[s("+"), fun (l, op, r) {Binop (op, l, r)}],
                  [s("-"), fun (l, op, r) {Binop (op, l, r)}]
                 }
          ],
          [Left, {[s("*"), fun (l, op, r) {Binop (op, l, r)}],
                  [s("%"), fun (l, op, r) {Binop (op, l, r)}],
                  [s("/"), fun (l, op, r) {Binop (op, l, r)}]
                 }
          ]
      }, primary);

var simpleStmt = memo $ eta syntax (
    kRead  x=inbr[s("("), lident, s(")")]   {Read (x)}
  | kWrite e=inbr[s("("), exp, s(")")]      {Write (e)}
  | kSkip                                   {Skip}
  | x=lident s[":="] e=exp                  {Assn (x, e)}
  );

var stmt = memo $ eta syntax (
    s1=simpleStmt s[";"] s2=stmt {Seq (s1, s2)}
  | simpleStmt
);

-- Public top-level parser
public parse = stmt;

