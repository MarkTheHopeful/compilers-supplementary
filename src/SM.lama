-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval([stack, state, world], insns) {
  case insns of
    {}                 -> [stack, state, world]
    | instruct : other -> case instruct of

        CONST (n) -> eval([n:stack, state, world], other)
      | READ      -> case readWorld(world) of
                        [v, nworld] -> eval([v:stack, state, nworld], other)
                     esac
      | WRITE     -> case stack of
                        v : st -> eval([st, state, writeWorld(v, world)], other)
                     esac
      | BINOP (s) -> case stack of
                        r : l : st -> eval([binap(s, l, r):st, state, world], other)
                     esac
      | LD    (v) -> eval([state(v):stack, state, world], other)
      | ST    (s) -> case stack of
                        v : st -> eval([st, state <- [s, v], world], other)
                     esac
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
      Var (s)           -> { LD(s) }
    | Const (n)         -> { CONST(n) }
    | Binop (s, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ { BINOP(s) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  case stmt of
      Skip               -> { }
    | Assn (s, exp)      -> compileExpr(exp) +++ { ST(s) }
    | Read (s)           -> { READ, ST(s) }
    | Write (exp)        -> compileExpr(exp) +++ { WRITE }
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  esac
}
