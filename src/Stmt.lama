-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([state, world], stmt) {
  case stmt of
    Read (s) -> case readWorld(world) of
                  [v, nworld] ->  [state <- [s, v], nworld]
                esac
    | Write (exp) -> [state, writeWorld(evalExpr(state, exp), world)]
    | Skip -> [state, world]
    | Assn (s, exp) -> [state <- [s, evalExpr(state, exp)], world]
    | Seq (stmt1, stmt2) -> eval( eval([state, world], stmt1), stmt2)
    | If (exp, stmt1, stmt2) -> if (evalExpr(state, exp) != 0) then eval([state, world], stmt1) else eval([state, world], stmt2) fi
    | While (exp, stmt1) -> if (evalExpr(state, exp)) then eval([state, world], Seq(stmt1, While(exp, stmt1))) else [state, world] fi
    | DoWhile (stmt1, exp) -> eval([state, world], Seq(stmt1, While (exp, stmt1)) )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
